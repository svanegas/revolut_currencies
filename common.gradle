apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'realm-android'

ext {
    // current task name (used in [mobile] and [common] gradle
    taskName = getGradle().getStartParameter().getTaskRequests().toString().toLowerCase()
}

// when running from console, you use ./gradlew test*
// when running from AS, task task with compile*UnitTestSources will be run before
if (taskName.contains("test") || taskName.contains("testsources")) {
    println "Applying allopen"

    apply plugin: 'kotlin-allopen'
    allOpen {
        annotation('com.svanegas.revolut.currencies.base.OpenForMocking')
    }
}

kapt {
    useBuildCache = true
}

android {
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    compileSdkVersion versions.compile_sdk
    dataBinding.enabled = true
    flavorDimensions "env"

    defaultConfig {
        minSdkVersion versions.min_sdk
        targetSdkVersion versions.compile_sdk
        vectorDrawables.useSupportLibrary = true
    }

    productFlavors {
        dev {}
        production {}
    }

    sourceSets {
        dev {
            java.srcDirs += 'src/server/java'
        }
        production {
            java.srcDirs += 'src/server/java'
        }
        test {
            java.srcDirs += testutils_files
        }
    }

    buildTypes {
        debug {
            crunchPngs false
        }

        release {
            crunchPngs true
            zipAlignEnabled true
            minifyEnabled true

            proguardFile "$project_directory/proguard-rules/proguard-square-retrofit2.pro"
            proguardFile "$project_directory/proguard-rules/proguard-square-okio.pro"
            proguardFile "$project_directory/proguard-rules/proguard-glide.pro"
            proguardFile "$project_directory/proguard-rules/proguard-gson.pro"
            proguardFile "$project_directory/proguard-rules/proguard-square-okhttp3.pro"
            proguardFile "$project_directory/proguard-rules/proguard-realm.pro"
            proguardFiles getDefaultProguardFile('proguard-android.txt'), "$project_directory/mobile/proguard-rules.pro"
        }
    }
}

dependencies {
    // Dagger
    kapt "com.google.dagger:dagger-compiler:${versions.dagger}"
    kapt "com.google.dagger:dagger-android-processor:${versions.dagger}"

    // Unit tests
    testImplementation "org.junit.jupiter:junit-jupiter:${versions.junit5}"
    testImplementation "org.mockito:mockito-core:${versions.mockito}"
    testImplementation "android.arch.core:core-testing:${versions.core_testing}"
}